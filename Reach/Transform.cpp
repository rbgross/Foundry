/***************************************************************************************************
* Transform.cpp
*
* Placeholder.
***************************************************************************************************/

/* INCLUDES */
#include "Foundry.h"

/***************************************************************************************************
* Transform function
*
* Placeholder.
***************************************************************************************************/
Transform::Transform( void )
{
	this->position = glm::vec3();
	this->rotation = glm::vec3();
	this->m_scale = glm::vec3();
	this->model = glm::mat4();
}

/***************************************************************************************************
* ~Transform function
*
* Placeholder.
***************************************************************************************************/
Transform::~Transform( void )
{
	
}

/***************************************************************************************************
* translate function
*
* Placeholder.
***************************************************************************************************/
void Transform::translate( glm::vec3 trans )
{
	this->model = glm::translate( this->model, trans );
	this->position = glm::vec3( this->model[3][0], this->model[3][1], this->model[3][2] );
}

/***************************************************************************************************
* rotate function
*
* Placeholder.
***************************************************************************************************/
void Transform::rotate( float angle, glm::vec3 rotAxis )
{
	this->model = glm::rotate( this->model, angle, rotAxis );
	this->position = glm::vec3( this->model[3][0], this->model[3][1], this->model[3][2] );
}

/***************************************************************************************************
* scale function
*
* Placeholder.
***************************************************************************************************/
void Transform::scale( glm::vec3 scale )
{
	this->model = glm::scale( this->model, scale );
	this->position = glm::vec3( this->model[3][0], this->model[3][1], this->model[3][2] );
}

/***************************************************************************************************
* getPosition function
*
* Placeholder.
***************************************************************************************************/
glm::vec3 Transform::getPosition( void )
{
	return this->position;
}

/***************************************************************************************************
* setPosition function
*
* Placeholder.
***************************************************************************************************/
void Transform::setPosition( glm::vec3 position )
{
	this->position = position;
}

/***************************************************************************************************
* getRotation function
*
* Placeholder.
***************************************************************************************************/
glm::vec3 Transform::getRotation( void )
{
	return this->rotation;
}

/***************************************************************************************************
* setRotation function
*
* Placeholder.
***************************************************************************************************/
void Transform::setRotation( glm::vec3 rotation )
{
	this->rotation = rotation;
}

/***************************************************************************************************
* getScale function
*
* Placeholder.
***************************************************************************************************/
glm::vec3 Transform::getScale( void )
{
	return this->m_scale;
}

/***************************************************************************************************
* setScale function
*
* Placeholder.
***************************************************************************************************/
void Transform::setScale( glm::vec3 scale )
{
	this->m_scale = scale;
}